/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { AppBar as PaperAppBar } from './components/paper-app-bar/paper-app-bar';

interface HTMLPaperAppBarElement extends PaperAppBar, HTMLElement {
}
declare var HTMLPaperAppBarElement: {
  prototype: HTMLPaperAppBarElement;
  new (): HTMLPaperAppBarElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paper-app-bar": HTMLPaperAppBarElement;
  }
  interface ElementTagNameMap {
      "paper-app-bar": HTMLPaperAppBarElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paper-app-bar": JSXElements.PaperAppBarAttributes;
      }
  }
  namespace JSXElements {
      export interface PaperAppBarAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { DrawerLayout as PaperDrawerLayout } from './components/paper-drawer-layout/paper-drawer-layout';

interface HTMLPaperDrawerLayoutElement extends PaperDrawerLayout, HTMLElement {
}
declare var HTMLPaperDrawerLayoutElement: {
  prototype: HTMLPaperDrawerLayoutElement;
  new (): HTMLPaperDrawerLayoutElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paper-drawer-layout": HTMLPaperDrawerLayoutElement;
  }
  interface ElementTagNameMap {
      "paper-drawer-layout": HTMLPaperDrawerLayoutElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paper-drawer-layout": JSXElements.PaperDrawerLayoutAttributes;
      }
  }
  namespace JSXElements {
      export interface PaperDrawerLayoutAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { Drawer as PaperDrawer } from './components/paper-drawer/paper-drawer';

interface HTMLPaperDrawerElement extends PaperDrawer, HTMLElement {
}
declare var HTMLPaperDrawerElement: {
  prototype: HTMLPaperDrawerElement;
  new (): HTMLPaperDrawerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paper-drawer": HTMLPaperDrawerElement;
  }
  interface ElementTagNameMap {
      "paper-drawer": HTMLPaperDrawerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paper-drawer": JSXElements.PaperDrawerAttributes;
      }
  }
  namespace JSXElements {
      export interface PaperDrawerAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          toggle?: any,
          open?: any,
          close?: any,
          opened?: boolean
      }
  }
}

import { FAB as PaperFab } from './components/paper-fab/paper-fab';

interface HTMLPaperFabElement extends PaperFab, HTMLElement {
}
declare var HTMLPaperFabElement: {
  prototype: HTMLPaperFabElement;
  new (): HTMLPaperFabElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paper-fab": HTMLPaperFabElement;
  }
  interface ElementTagNameMap {
      "paper-fab": HTMLPaperFabElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paper-fab": JSXElements.PaperFabAttributes;
      }
  }
  namespace JSXElements {
      export interface PaperFabAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { HeaderLayout as PaperHeaderLayout } from './components/paper-header-layout/paper-header-layout';

interface HTMLPaperHeaderLayoutElement extends PaperHeaderLayout, HTMLElement {
}
declare var HTMLPaperHeaderLayoutElement: {
  prototype: HTMLPaperHeaderLayoutElement;
  new (): HTMLPaperHeaderLayoutElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paper-header-layout": HTMLPaperHeaderLayoutElement;
  }
  interface ElementTagNameMap {
      "paper-header-layout": HTMLPaperHeaderLayoutElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paper-header-layout": JSXElements.PaperHeaderLayoutAttributes;
      }
  }
  namespace JSXElements {
      export interface PaperHeaderLayoutAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { InputText as PaperInputText } from './components/paper-input-text/paper-input-text';

interface HTMLPaperInputTextElement extends PaperInputText, HTMLElement {
}
declare var HTMLPaperInputTextElement: {
  prototype: HTMLPaperInputTextElement;
  new (): HTMLPaperInputTextElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paper-input-text": HTMLPaperInputTextElement;
  }
  interface ElementTagNameMap {
      "paper-input-text": HTMLPaperInputTextElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paper-input-text": JSXElements.PaperInputTextAttributes;
      }
  }
  namespace JSXElements {
      export interface PaperInputTextAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          getValue?: any,
          type?: string,
          hint?: string,
          label?: string,
          id?: string,
          alwaysFloatLabel?: boolean,
          value?: string
      }
  }
}

